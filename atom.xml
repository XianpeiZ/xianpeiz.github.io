<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZXP&#39;s Notebook</title>
  
  <subtitle>keep moving</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-17T09:54:37.117Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zxp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并查集简单理解&amp;leetcode974</title>
    <link href="http://yoursite.com/2019/10/17/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3&amp;leetcode974/"/>
    <id>http://yoursite.com/2019/10/17/并查集简单理解&amp;leetcode974/</id>
    <published>2019-10-17T08:30:08.000Z</published>
    <updated>2019-10-17T09:54:37.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>并查集是一种数据结构，可以有效处理数据的关联及查找问题。</p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>假设有这样一个问题：在一个地区有6个城市A, B, C, D, E, F，现在知道所有的城市之间的道路连接情况，A-B, D-E, C- A, B-F，问从A能到E吗？再修几条路可使得所有城市之间连通？</p><p>在认识到并查集之前，为了解决这个问题，我会将数据构造图的数据结构来处理此类问题，判断两个城市是否关联，要判断他们是否属于同一个连通分量。</p><p>使用并查集的思想，首先我们初始化，使得每个城市的祖先都是它自身。然后根据已知数据，A-B, A是B的祖先的儿子，即A是B的儿子；同样根据D-E，D是E的儿子；根据C-A, C是A的祖先的儿子，即C是B的儿子；根据B-F, B是F的儿子。可知A的祖先是B，E的祖先是E自身，他们祖先不同，所以A与E不连通；共有两个祖先是自身的元素，B和E，即有两个连通分量，再建一条路即可。</p><p>使用图的数据结构，使用二维数组保存关系，空间复杂度O(N<sup>2</sup>)，时间复杂度O(N<sup>2</sup>)。使用并查集，空间复杂度O(N)，时间复杂度O(N*log(N))。</p><h3 id="并查集主要操作"><a href="#并查集主要操作" class="headerlink" title="并查集主要操作"></a>并查集主要操作</h3><p>根据上类，我们已经有简单的了解。可以看出，构造并查集主要有两个操作，一个是查找元素的祖先元素，一个是标记元素的祖先。我们分别记为find和union。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> </span>&#123;</span><br><span class="line">    <span class="comment">//parent下标代表元素的编号，数组存放元素的祖先</span></span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//find查找元素的父亲，知道查到父亲是自身的元素返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//union标记元素祖先</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="leetcode974"><a href="#leetcode974" class="headerlink" title="leetcode974"></a>leetcode974</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在二维平面上，我们将石头放置在一些整数坐标点上。每个坐标点上最多只能有一块石头。</p><p>现在，move 操作将会移除与网格上的某一块石头共享一列或一行的一块石头。</p><p>我们最多能执行多少次 move 操作？</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= stones.length &lt;= 1000</code></li><li><code>0 &lt;= stones[i][j] &lt; 10000</code></li></ol><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>求得这对石头按关系连接起来，连通分量的个数即可，最终答案是石头个数减连通分量数。</p><p>虽然石头坐标是二维，但我们可以将其以为处理，坐标范围已定，我们可以将纵坐标元素+10000来表示。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeStones</span><span class="params">(<span class="keyword">int</span>[][] stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = stones.length;</span><br><span class="line">        <span class="comment">//构造大小为20000的并查集</span></span><br><span class="line">        DSU dsu = <span class="keyword">new</span> DSU(<span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//union</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] stone: stones)</span><br><span class="line">            dsu.union(stone[<span class="number">0</span>], stone[<span class="number">1</span>] + <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; seen = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">//寻找不同祖先的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] stone: stones)</span><br><span class="line">            seen.add(dsu.find(stone[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> N - seen.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;并查集是一种数据结构，可以有效处理数据的关联及查找问题。&lt;/p&gt;
&lt;h3 id=&quot;举例说明&quot;&gt;&lt;a href=&quot;#举例说明&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="并查集, 数据结构" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://yoursite.com/2019/10/16/hello/"/>
    <id>http://yoursite.com/2019/10/16/hello/</id>
    <published>2019-10-16T09:55:16.923Z</published>
    <updated>2019-10-16T09:56:13.550Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客，记录自己，拥抱世界！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一篇博客，记录自己，拥抱世界！&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
